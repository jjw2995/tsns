openapi: 3.0.0
info:
  version: 1.0.0
  title: tSNS API
  description: "**tiny-SNS API** is a node-JS express backend providing basic instagram alike functionalities such as registering, following, posting, commenting and expressing how one feels about posts and comments"
  contact:
    name: Jiwoo Jeon
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/auth/register:
    post:
      tags:
        - auth
      description: register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerBody"
            example:
              nickname: user1
              email: example@gmail.com
              password: UPlow123!
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/registerRes"
              example:
                _id: 2a114froa2s2314adf
                nickname: user1
        "400":
          description: "Bad Request, reason in body"

  /api/auth/login:
    post:
      tags:
        - auth
      description: login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginBody"
            example:
              email: example@gmail.com
              password: UPlow123!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginRes"
              example:
                _id: a1froas2314adf
                nickname: user1
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9w...
        "400":
          description: "Bad Request, reason in body"

  /api/auth/logout:
    post:
      tags:
        - auth
      description: logout user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refreshToken:
                  type: string
              example:
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5...

      responses:
        "204":
          description: OK

        "401":
          description: Unauthorized

  /api/auth/token:
    post:
      summary: refresh both access & refresh tokens
      description: refresh both access & refresh tokens
      tags:
        - auth
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refreshToken:
                  type: string
              example:
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5...

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  refreshToken:
                    type: string
                  accessToken:
                    type: string
                example:
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9w...

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                example:
                  error: "invalid refreshToken"

  /api/auth/verify-account/{userID}/{verifyingHash}:
    get:
      summary: verify new user
      description: verify user's email by hitting the endpoint
      tags:
        - auth
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: ID of the user to verify
        - in: path
          name: verifyingHash
          schema:
            type: string
          required: true
          description: Hash generated to verify user

      responses:
        "204":
          description: OK

        "400":
          description: Bad Request, reason in body

  /api/auth/resend-verification-email:
    post:
      summary: set up password reset
      description: request password reset
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: "#/components/schemas/email"
      responses:
        "204":
          description: OK

        "400":
          description: Bad Request, reason in body

  /api/auth/reset-password:
    post:
      summary: set up password reset
      description: request password reset, sends email with userID and resetPassHash to be used for set-new-password
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: "#/components/schemas/email"
      responses:
        "204":
          description: OK

        "400":
          description: Bad Request, reason in body

  /api/auth/set-new-password:
    post:
      description: set new password using userID and resetPassHash sent by reset-password
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userID:
                  $ref: "#/components/schemas/_id"
                password:
                  $ref: "#/components/schemas/password"
                resetPassHash:
                  type: string
      responses:
        "204":
          description: OK

        "400":
          description: Bad Request, reason in body

  /api/users/private:
    post:
      description: set user account as private account
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                isPrivate:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  isPrivate:
                    type: boolean
                  nickname:
                    type: string
                  _id:
                    $ref: "#/components/schemas/_id"
                example:
                  isPrivate: true
                  nickname: "qwer"
                  _id: "5ffe482ab9cc03430481c67e"

        "404":
          description: Not Found

  /api/users/search:
    get:
      summary: search users
      description: search users with nickname
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: user nickname
          schema:
            type: string
          description: nickname of the user to search

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    isPrivate:
                      type: boolean
                    nickname:
                      $ref: "#/components/schemas/nickname"
                    _id:
                      $ref: "#/components/schemas/_id"
                  example:
                    isPrivate: false
                    nickname: "user2"
                    _id: "5fde95fc9caf2679fbd13484"

        "404":
          description: Not Found

  /api/users/remove:
    delete:
      summary: remove user
      description: remove requesting user
      tags:
        - users

      responses:
        "204":
          description: OK

        "404":
          description: Not Found

  /api/users/{userID}:
    get:
      summary: get user info
      description: get user information
      tags:
        - users
      parameters:
        - in: path
          name: userID
          schema:
            $ref: "#/components/schemas/_id"
          required: true

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  isFollowing:
                    type: boolean
                  isPending:
                    type: boolean
                  nickname:
                    type: string
                  _id:
                    $ref: "#/components/schemas/_id"
                example:
                  {
                    isFollowing: false,
                    isPending: false,
                    isPrivate: true,
                    nickname: "privateUser1",
                    _id: "5fde95fc9caf2679fbd13485",
                  }

        "404":
          description: Not Found

  /api/followees:
    post:
      summary: follow another user
      description: create a new followee, requester follows someone
      tags:
        - followees
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _id:
                  type: string
              example:
                _id: 5fa53f99ab999d06f32575e9
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followerDoc"

        "400":
          description: Bad Request, reason in body

  /api/followees/{userID}:
    get:
      summary: get list of following users
      description: get list of accepted followees for given userID
      tags:
        - followees
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: ID of the user to stop following
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followList"

        "500":
          description: internal error

    delete:
      summary: stop following a user
      description: stop following a followee
      tags:
        - followees
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: ID of the user to stop following
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followerDoc"

        "400":
          description: Bad Request, reason in body

  /api/followees/pending:
    get:
      summary: get pending followee requests
      description: get list of followees pending, those that requester is waiting apporval
      tags:
        - followees
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followList"

  ##################################################################
  /api/followers/{userID}:
    get:
      summary: get list of users following the requester
      description: get list of accepted followers given userID
      tags:
        - followers
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: ID of the user to get the list for
          example: "5fa53f99ab999d06f32575e9"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followList"

    delete:
      summary: remove a follower
      description: stop other user from following the requester
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: ID of the user to stop following the requester
          example: "5fa53f99ab999d06f32575e9"
      tags:
        - followers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followerDoc"
        "400":
          description: Bad Request, reason in body

  /api/followers/pending:
    get:
      summary: get pending follower requests
      description: get list of followers pending, those waiting requester's apporval
      tags:
        - followers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followList"

  /api/followers/pending/dismissed:
    get:
      summary: get dismissed pending follower requests
      description: get list of dismissed pending followers
      tags:
        - followers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followList"
        "503":
          description: Server Error

  /api/followers/seen:
    post:
      summary: to dismiss from notification
      description: to dismiss pending follower from notification
      tags:
        - followers
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _id:
                  $ref: "#/components/schemas/_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followerDoc"
        "404":
          description: Not Found

  /api/followers/accept:
    post:
      summary: accept follower request
      description: accept follower's follow request
      tags:
        - followers
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _id:
                  $ref: "#/components/schemas/_id"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/followerDoc"

        "404":
          description: Not Found

  ##################################################################

  /api/posts:
    post:
      tags:
        - posts
      security:
        - bearerAuth: []
      summary: create a post
      description: POST a post (detailed usage example @ github README)
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                level:
                  type: string
                image1...:
                  type: string
                  description: append up to 4 images with any name to the multipart/formData
                  format: binary
                image2...:
                  type: string
                  description: append up to 4 images with any name to the multipart/formData
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postObj"

        "400":
          description: Bad Request, reason in body
        "500":
          description: Internal Error

    # /api/posts:
    patch:
      tags:
        - posts
      security:
        - bearerAuth: []
      summary: update post description and view level
      requestBody:
        content:
          # multipart/form-data:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                description:
                  type: string
                level:
                  type: string
            example:
              _id: "p5faaacd4ec3c410589fef8c6"
              description: "new description"
              level: "followers"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postObj"

              example:
                reactions: { love: 0, haha: 0, sad: 0, angry: 0 }
                description: "new description"
                media:
                  [
                    "https://storage.googleapis.com...",
                    "https://storage.googleapis.com...%3D",
                  ]
                level: "followers"
                _id: "p5faaacd4ec3c410589fef8c6"
                user: { _id: "5faaacd0ec3c410589fef8c0", nickname: "user1" }
                createdAt: "2020-11-10T15:08:04.316Z"
                updatedAt: "2020-11-10T15:11:04.316Z"
                userReaction: null

        "400":
          description: Bad Request, reason in body
        # "500":
        #   description: Internal Error

    get:
      tags:
        - posts
      security:
        - bearerAuth: []
      summary: get posts on user's home
      parameters:
        - in: query
          name: last-created-at
          schema:
            type: string
          description: createdAt time of the last content for paging purposes
        - in: query
          name: num
          schema:
            type: number
          description: number of contents to get
      description: get "public"/ "follower" level posts of following people and all level ("public"/ "follower"/ "private") posts of the user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/postObj"

        "400":
          description: Bad Request, reason in body
  /api/posts/{postID}:
    delete:
      parameters:
        - in: path
          required: true
          name: postID
          schema:
            type: string
      tags:
        - posts
      security:
        - bearerAuth: []
      summary: create a post
      description: delete a post given postID
      # requestBody:
      responses:
        "204":
          description: successfully removed
        "404":
          description: Not Found

  /api/posts/mine:
    get:
      tags:
        - posts
      security:
        - bearerAuth: []
      summary: get user's posts
      parameters:
        - in: query
          name: last-created-at
          schema:
            type: string
          description: createdAt time of the last content for paging purposes
        - in: query
          name: num
          schema:
            type: number
          description: number of contents to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/postObj"
        "400":
          description: Bad Request, reason in body

  /api/posts/explore:
    get:
      tags:
        - posts
      summary: get public posts by other users in trending order
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: last-reactions-count
          schema:
            type: string
          description: reactions count of the last content for paging purposes
        - in: query
          name: num
          schema:
            type: number
          description: number of contents to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/postObj"

        "400":
          description: Bad Request, reason in body

  /api/posts/user/{userID}:
    get:
      description: get certain user's post, gets up to followers posts depending on follow status
      tags:
        - posts
      summary: get certain user's post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: ID of the user to get posts from
          example: "5fabf08f4541191693481591"
        - in: query
          name: last-created-at
          schema:
            type: string
          description: createdAt time of the last content for paging purposes
        - in: query
          name: num
          schema:
            type: number
          description: number of contents to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/postObj"

        "400":
          description: Bad Request, reason in body

  /api/posts/react:
    post:
      tags:
        - posts
        - react
      security:
        - bearerAuth: []
      summary: "react to a post"
      description: "show one of love, haha, sad, angry emotions"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _id:
                  $ref: "#/components/schemas/_id"
                reaction:
                  $ref: "#/components/schemas/reaction"
              example:
                _id: p5fabef54a7325615d0d5c373
                reaction: haha
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reactionDoc"
              example:
                _id: "p5fffd7ebeeec1015b0b5ccea"
                reactions: { love: 0, haha: 0, sad: 0, angry: 1 }
                reactionsCount: 1
                userReaction: "angry"

        "400":
          description: Bad Request, reason in body
        "500":
          description: Internal Error

  /api/posts/react/{postID}:
    delete:
      tags:
        - posts
        - react
      security:
        - bearerAuth: []
      summary: undo reaction
      description: delete user's reaction
      parameters:
        - in: path
          name: postID
          schema:
            type: string
          required: true
          description: ID of the post to remove user's reaction
          example: "p5fa53f99ab999d06f32575e9"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reactionDoc"
              example:
                _id: "p5fffd7ebeeec1015b0b5ccea"
                reactions: { love: 0, haha: 0, sad: 0, angry: 1 }
                reactionsCount: 1
                userReaction: "angry"
        "400":
          description: Bad Request, reason in body
        # "500":
        #   description: Internal Error

  ##################################################################
  ##################################################################

  /api/comments:
    post:
      tags:
        - comments
      security:
        - bearerAuth: []
      summary: create a comment
      description: leave comment on post
      requestBody:
        content:
          application/json:
            schema:
              properties:
                postID:
                  type: string
                content:
                  type: string
                parentComID:
                  type: string
                  nullable: true

            example:
              postID: p5faf8980f1199903d7e1eff1
              content: user1-main thread content 1
              parentComID: c5faf8980f1199903d7e1eff4

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commentObj"

        "400":
          description: Bad Request, reason in body
        # "500":
        #   description: Internal Error

  /api/comments/{postID}:
    get:
      tags:
        - comments
      security:
        - bearerAuth: []
      summary: get comments on given postID
      description: get comments on given postID
      parameters:
        - in: path
          name: postID
          schema:
            type: string
          required: true
          description: ID of the post to remove user's reaction
          example: "p5fa53f99ab999d06f32575e9"
        - in: query
          name: last-created-at
          schema:
            type: string
          description: createdAt time of the last content (to get next set of comments)
        - in: query
          name: num
          schema:
            type: number
          description: number of contents to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/commentObj"
                example:
                  content: "some comment"
                  createdAt: "2021-01-14T10:09:16.169Z"
                  deleteOnUIDs:
                    ["5ffe482ab9cc03430481c67e", "5ffe482ab9cc03430481c67e"]
                  numChild: 5
                  parentComID: null
                  postID: "p5fffd7ebeeec1015b0b5ccea"
                  reactions: { love: 0, haha: 0, sad: 0, angry: 0 }
                  subComments: []
                  updatedAt: "2021-01-14T11:18:38.337Z"
                  user: { _id: "5ffe482ab9cc03430481c67e", nickname: "qwer" }
                  userReaction: null
                  __v: 0
                  _id: "c6000184ceeec1015b0b5ccec"
        "400":
          description: Bad Request, reason in body

  /api/comments/subcomments/{commentID}:
    get:
      tags:
        - comments
      security:
        - bearerAuth: []
      summary: get subComments of given commentID
      description: get subComments of given commentID
      parameters:
        - in: path
          name: commentID
          schema:
            type: string
          description: commentID to get subcomments for
          required: true
        - in: query
          name: last-created-at
          schema:
            type: string
          description: createdAt time of the last content for paging purposes
        - in: query
          name: num
          schema:
            type: number
          description: number of contents to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/commentObj"
                example:
                  content: "subcomment"
                  createdAt: "2021-01-14T11:18:38.340Z"
                  deleteOnUIDs:
                    [
                      "5ffe482ab9cc03430481c67e",
                      "5ffe482ab9cc03430481c67e",
                      "5ffe482ab9cc03430481c67e",
                    ]
                  numChild: 0
                  parentComID: "c6000184ceeec1015b0b5ccec"
                  postID: "p5fffd7ebeeec1015b0b5ccea"
                  reactions: { love: 0, haha: 0, sad: 0, angry: 0 }
                  updatedAt: "2021-01-14T11:18:38.340Z"
                  user: { _id: "5ffe482ab9cc03430481c67e", nickname: "qwer" }
                  userReaction: null
                  _id: "c6000288e4f63ae3c7dedb1b2"

        "400":
          description: Bad Request, reason in body

  /api/comments/{(sub)commentID}:
    delete:
      tags:
        - comments
      security:
        - bearerAuth: []
      summary: remove post
      parameters:
        - in: path
          name: (sub)commentID
          schema:
            type: string
          required: true
          description: ID of comment (or subcomment) to delete
      responses:
        "204":
          description: No Content

        "400":
          description: Bad Request, reason in body

  /api/comments/react:
    post:
      tags:
        - comments
        - react
      security:
        - bearerAuth: []
      summary: "react to a post"
      description: "show one of love, haha, sad, angry emotions"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _id:
                  $ref: "#/components/schemas/_id"
                reaction:
                  $ref: "#/components/schemas/reaction"
              example:
                _id: c5fabef54a7325615d0d5c373
                reaction: haha
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reactionDoc"
              example:
                reactions: { love: 1, haha: 0, sad: 0, angry: 0 }
                reactionsCount: 1
                userReaction: "love"
                _id: "c600028864f63ae3c7dedb1b0"
        "400":
          description: Bad Request, reason in body
        "500":
          description: Internal Error

  /api/comments/react/{(sub)commentID}:
    delete:
      tags:
        - comments
        - react
      security:
        - bearerAuth: []
      summary: undo reaction
      description: delete user's reaction
      parameters:
        - in: path
          name: (sub)commentID
          schema:
            type: string
          required: true
          description: ID of the post to remove user's reaction
          example: "p5fa53f99ab999d06f32575e9"
      responses:
        "200":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reactionDoc"

              example:
                reactions: { love: 0, haha: 0, sad: 0, angry: 0 }
                reactionsCount: 0
                userReaction: null
                _id: "c600028834f63ae3c7dedb1af"

        "400":
          description: Bad Request, reason in body
        # "500":
        #   description: Internal Error

##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    refreshToken:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /api/auth/login
          tokenUrl: /api/auth/token
  schemas:
    nickname:
      type: string
      minimum: 3

    email:
      type: string
      uniqueItems: true

    password:
      type: string
      minimum: 8
      maximum: 15
      description: "must contain least one special char, lower and upper char, and a number"

    _id:
      type: string
      uniqueItems: true
      description: generated by the API

    reaction:
      type: string
      enum:
        - love
        - haha
        - sad
        - angry

    level:
      type: string
      enum:
        - public
        - followers
        - private
      description: view level for posts

    registerBody:
      properties:
        nickname:
          $ref: "#/components/schemas/nickname"
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"

    registerRes:
      properties:
        _id:
          $ref: "#/components/schemas/_id"
        nickname:
          $ref: "#/components/schemas/nickname"

    loginBody:
      properties:
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"

    userObj:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/_id"
        nickname:
          $ref: "#/components/schemas/nickname"

    loginRes:
      properties:
        _id:
          type: string
        nickname:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
    # loginBody:
    reactionsObj:
      type: object
      properties:
        love:
          type: integer
        haha:
          type: integer
        sad:
          type: integer
        angry:
          type: integer

    postObj:
      properties:
        description:
          type: string
          maximum: 200
        media:
          type: array
          items:
            type: string
        level:
          $ref: "#/components/schemas/level"
        _id:
          $ref: "#/components/schemas/_id"
        user:
          $ref: "#/components/schemas/userObj"
        reactions:
          $ref: "#/components/schemas/reactionsObj"
        userReaction:
          $ref: "#/components/schemas/reaction"
        reactionsCount:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        reactions: { love: 0, haha: 0, sad: 0, angry: 0 }
        description: "PrivatePost"
        media:
          [
            "https://storage.googleapis.com...",
            "https://storage.googleapis.com...%3D",
          ]
        level: "private"
        reactionsCount: 0
        _id: "p5faaacd4ec3c410589fef8c6"
        user: { _id: "5faaacd0ec3c410589fef8c0", nickname: "user1" }
        createdAt: "2020-11-10T15:08:04.316Z"
        updatedAt: "2020-11-10T15:08:04.316Z"
        userReaction: null

    commentObj:
      type: object
      properties:
        reactions:
          $ref: "#/components/schemas/reactionsObj"
        userReaction:
          $ref: "#/components/schemas/reaction"
        parentComID:
          $ref: "#/components/schemas/_id"
        numChild:
          type: number
        _id:
          $ref: "#/components/schemas/_id"
        postID:
          $ref: "#/components/schemas/_id"
        user:
          $ref: "#/components/schemas/userObj"
        content:
          type: string
          minimum: 1
          maximum: 150
        createdAt:
          type: string
        updatedAt:
          type: string
        subComments:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/commentObj"

        deleteOnUIDs:
          type: array
          items:
            type: string
      example:
        content: "some comment"
        createdAt: "2021-01-14T10:09:16.169Z"
        deleteOnUIDs: ["5ffe482ab9cc03430481c67e", "5ffe482ab9cc03430481c67e"]
        numChild: 0
        parentComID: c5faf8980f1199903d7e1eff4
        postID: p5fffd7ebeeec1015b0b5ccea
        reactions: { love: 0, haha: 0, sad: 0, angry: 0 }
        updatedAt: "2021-01-14T10:09:16.169Z"
        user: { _id: "5ffe482ab9cc03430481c67e", nickname: "qwer" }
        _id: "c6000184ceeec1015b0b5ccec"

    followList:
      properties:
        schema:
          type: array
          items:
            properties:
              _id:
                $ref: "#/components/schemas/_id"
              user:
                $ref: "#/components/schemas/userObj"
          example:
            [
              {
                user: { _id: "5fde95fc9caf2679fbd13483", nickname: "user_1" },
                _id: "5fde95fd9caf2679fbd13487",
              },
              {
                user: { _id: "5fde95fc9caf2679fbd13484", nickname: "user_2" },
                _id: "5fde95fd9caf2679fbd13485",
              },
            ]

    followerDoc:
      properties:
        createdAt:
          type: string
        followee:
          $ref: "#/components/schemas/userObj"

        follower:
          $ref: "#/components/schemas/userObj"

        hasViewed:
          type: boolean
        isPending:
          type: boolean
        updatedAt:
          type: string
        _id:
          $ref: "#/components/schemas/_id"
      example:
        createdAt: "2021-01-13T04:42:48.538Z"
        followee: { _id: "5fde95fc9caf2679fbd13483", nickname: "user_1" }
        follower: { _id: "5ffe482ab9cc03430481c67e", nickname: "qwer" }
        hasViewed: false
        isPending: false
        updatedAt: "2021-01-13T04:42:48.538Z"
        _id: "5ffe7a480fb4b20d3f3137f4"

    reactionDoc:
      properties:
        _id:
          $ref: "#/components/schemas/_id"
        reactions:
          $ref: "#/components/schemas/reaction"
        reactionsCount:
          type: number
        userReaction:
          $ref: "#/components/schemas/reactionsObj"

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jjw2995/tSNS_API/1.0.0
